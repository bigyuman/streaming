package bigyu.master.streaming;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import java.util.Arrays;

import scala.Tuple2;

/**
 * Version of the WordCount Spark application using streaming and window time
 *
 * @author Antonio J. Nebro
 */
public class StreamingWithWindowWordCount {
  public static void main(String[] args) throws InterruptedException {
    
	  Logger.getLogger("org").setLevel(Level.OFF);
	  
	  if (args.length < 2) {
      System.err.println("Usage: StreamingWithWindowWordCount <hostname> <port>");
      System.exit(1);
    }

    // Create the context with a 1 second batch size
    SparkConf sparkConf = new SparkConf().setAppName("JavaNetworkWordCount");
    JavaStreamingContext streamingContext = new JavaStreamingContext(sparkConf, Durations.seconds(1));

    // Create a JavaReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc -l port')
    JavaReceiverInputDStream<String> lines = streamingContext.socketTextStream(args[0],
            Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);

    Function2<Integer, Integer, Integer> reduceFunction =  (integer, integer2) -> integer + integer2;

    JavaDStream<String> words = lines.flatMap(
            line -> Arrays.asList(line.split(" ")).iterator());
    JavaPairDStream<String, Integer> pairs = words.mapToPair(
            string -> new Tuple2<String, Integer>(string, 1));
    JavaPairDStream<String, Integer> windowedWordCounts = pairs.reduceByKeyAndWindow(
            reduceFunction, Durations.seconds(5), Durations.seconds(2));

    windowedWordCounts.print();
    streamingContext.start();
    streamingContext.awaitTermination();
  }
}